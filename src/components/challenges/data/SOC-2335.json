{
    "uid": "SOC-2335",
    "subject": "Malware Detection Rule Writing",
    "reporter": "Adrian Letner",
    "instructions": "<p>Over the past few months, your SOC team has accumulated a significant backlog of malware samples. These samples have been collected from various sources such as phishing emails, suspicious downloads, and through user reports.</p> <p>To address this challenge, the organization has recently invested in enhancing its malware detection and threat intelligence capabilities by adopting rule-based detections with <b>YARA</b>. Your task is to leverage your newly acquired YARA expertise to develop and refine YARA rules to better detect the threats and artifacts associated with these malware samples.</p><h3>Challenge Directory:</h3><p><ul><li><code>~/Desktop/SOC_Level_1/Threat_Intelligence/YARA/Challenge/*</code></li></ul></p>",
  
  
    "questions": [
        {
            "quid": "de1242f9",
            "question": "First, run the <code>strings</code> command against <code>Samples/HawkEye.exe.meow</code>. What is the <b>name</b> of the JPG file that is referenced in the binary?",
            "type": "text_input",
            "placeholder": "Enter your answer here",
            "correct_answers": ["tmp1E2A.jpg"]
        },
        {
            "quid": "a61343aa",
            "question": "Use the <b>name</b> of the JPG file to create a YARA detection rule for any executable files that match this string identifier. Run it against <code>HawkEye.exe.meow</code>. What is the offset location of the matching detection?",
            "type": "text_input",
            "placeholder": "*******",
            "hint": "Remember, the <code>-s</code> argument can be appended to YARA to print out any matching strings and their locations.",
            "correct_answers": ["0x1115d"]
        },
        {
            "quid": "536f8e92",
            "question": "What is the decimal conversion (base 10 equivalent) of this hexadecimal offset?",
            "type": "text_input",
            "placeholder": "*****",
            "hint": "You can use <code>printf</code> or an online tool to convert hexadecimal to decimal/base 10.",
            "correct_answers": ["69981"]
        },
        {
            "quid": "c2dcf137",
            "question": "Run the <code>Rules/rule1.yar</code> file against the entire <code>Samples</code> directory. Which file was detected?",
            "type": "text_input",
            "placeholder": "Enter your answer here",
            "correct_answers": ["RevengeRAT.exe.meow", "./RevengeRAT.exe.meow"]
        },
        {
            "quid": "fece66d3",
            "question": "Using the <code>rule1.yar</code> rule on the previously identified binary, how many individual string matches were detected?",
            "type": "text_input",
            "placeholder": "Enter your answer here",
            "hint": "Remember, the <code>-s</code> argument can be appended to YARA to print out any matching strings and their locations.",
            "correct_answers": ["4", "four"]
        },
        {
            "quid": "3b3ecfcf",
            "question": "Run the <code>strings</code> command against <code>FreeYoutubeDownloader.exe.meow</code>. What <b>base domain name</b> repeatedly appears in the output?",
            "type": "text_input",
            "placeholder": "********************.***",
            "correct_answers": ["youtubedownloadernew.com", "youtubedownloadernew.com"]
        },
        {
            "quid": "c7330b68",
            "question": "Thinking back to the <b>Pyramid of Pain</b>, it would be quite trivial for an attacker to change the name of the program and any references to the previously identified domain name. However, consider the <b>host artifacts</b> that this tool inherently interacts with to function. Which interesting or unique <b>registry key</b> is found in the <code>strings</code>?",
            "type": "text_input",
            "placeholder": "********\\*******\\******\\***",
            "hint": "Registry keys are typically constructed of a path consisting of a root key followed by a series of subkeys separated by backslashes. Example: <code>EXAMPLE\\Sub\\Key</code>",
            "correct_answers": ["SOFTWARE\\Borland\\Delphi\\RTL"]
        },
        {
            "quid": "a3ba0f7b",
            "question": "Create a YARA rule only to detect this <b>registry key</b>, and run it <b>recursively</b> against the <code>Samples</code> folder. What <b>other</b> file(s) are detected? Only provide the name of the files, not the full path.",
            "type": "text_input",
            "placeholder": "Answer format: File1, File2, etc.",
            "correct_answers": ["ZmtsO2d, c2RmZ2R", "ZmtsO2d c2RmZ2R", "c2RmZ2R, ZmtsO2d", "c2RmZ2R ZmtsO2d"]
        },
        {
            "quid": "e5a5299a",
            "question": "Create a YARA rule to detect any <b>GIF89a</b> files <b>under 50 KB in size</b>. Run it <b>recursively</b> against the <code>Samples</code> folder. Which file(s) are matched? Only provide the name of the files, not the full path.",
            "type": "text_input",
            "placeholder": "Enter your answer here",
            "hint": "Use the <a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\" target=\"_blank\">List of file signatures</a> reference to find the hex signature corresponding to the <b>Graphics Interchange Format (GIF)</b> extension.",
            "correct_answers": ["vJ8AWaf"]
        },
        {
            "quid": "8eb5bcd6",
            "question": "Create a YARA rule to detect any <b>GIF89a</b> files <b>over 50 KB in size</b>. Run it <b>recursively</b> against the <code>Samples</code> folder. Which file(s) are matched? Only provide the name of the files, not the full path.",
            "type": "text_input",
            "placeholder": "Enter your answer here",
            "hint": "Use the <a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\" target=\"_blank\">List of file signatures</a> reference to find the hex signature corresponding to the <b>Graphics Interchange Format (GIF)</b> extension.",
            "correct_answers": ["fEbZizl"]
        },
        {
            "quid": "b2293c8c",
            "question": "Research the <b>file signature</b> or <b>magic bytes</b> pertaining to <b>OpenSSH private key</b> files. What is the hexadecimal string (hex signature) that can be used to detect this signature?",
            "type": "text_input",
            "placeholder": "** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **",
            "hint": "Use the <a href=\"https://en.wikipedia.org/wiki/List_of_file_signatures\" target=\"_blank\">List of file signatures</a> reference to find the hex signature corresponding to the <b>OpenSSH private key</b> file.",
            "correct_answers": ["2D 2D 2D 2D 2D 42 45 47 49 4E 20 4F 50 45 4E 53 53 48 20 50 52 49 56 41 54 45 20 4B 45 59 2D 2D 2D 2D 2D"]
        },
        {
            "quid": "329d5878",
            "question": "Create a YARA rule to parse through the content of <b>executables</b> and detect any embedded <b>OpenSSH private key files</b>. Run it <b>recursively</b> against the <code>Samples</code> folder. Which file(s) are matched? Only provide the name of the files, not the full path.",
            "type": "text_input",
            "placeholder": "Answer format: File1, File2, etc.",
            "correct_answers": ["VG8gQmF, Meoware.exe.meow", "VG8gQmF Meoware.exe.meow", "Meoware.exe.meow, VG8gQmF", "Meoware.exe.meow VG8gQmF"]
        }
    ]
  }